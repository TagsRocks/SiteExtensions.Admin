@* Generator: WebPage *@

@using System.Globalization;
@using System.Text.RegularExpressions;
@using NuGet;
@using SiteExtensions.Administration;
@using SiteExtensions.Administration.Resources;

@section PackageHead { 
    <script type="text/javascript" src="@Href("scripts/PackageAction.js")"></script>
}

@{
    // Read from request  
    var packageId = Request["package"];
    var version = Request["version"];

    WebProjectManager projectManager = new WebProjectManager();
    IPackage package = projectManager.LocalRepository.FindPackage(packageId, version != null ? SemanticVersion.Parse(version) : null);

    if (package == null) {
        ModelState.AddFormError(PackageManagerResources.BadRequest);
        @Html.ValidationSummary()
        return; 
    }

    if (IsPost) {
        AntiForgery.Validate();
        try { 
            projectManager.UninstallPackage(package);
        } catch (Exception exception) {
            ModelState.AddFormError(exception.Message);
        }
        
        if (ModelState.IsValid) {
            Response.Redirect("~/?action-completed=Uninstall");
        }
        else {
            @Html.ValidationSummary(String.Format(CultureInfo.CurrentCulture, PackageManagerResources.PackageUninstallationError, package.GetDisplayName()))
        }
        return;
    }
}
@{
    var encodedPackageName = Html.Encode(package.GetDisplayName());
    <h4>@Html.Raw(String.Format(CultureInfo.CurrentCulture, PackageManagerResources.AreYouSureUninstall, encodedPackageName))</h4>
}
<form method="post" action="" id="submitForm">
<fieldset class="no-border">
    @AntiForgery.GetHtml()
    <input type="hidden" name="package" value="@packageId" />
    <input type="hidden" name="version" value="@version" />
    <input type="submit" value="@PackageManagerResources.UninstallPackage" />
    &nbsp;
    <input type="reset" value="@PackageManagerResources.Cancel" data-returnurl="@Href("~/")" />
</fieldset>
</form>